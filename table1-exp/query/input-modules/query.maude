load ../apmaude

mod SORTS is
  inc SCHEDULING .
  pr NAT .
  
  sorts Query Queries Key Value Timestamp Data Oids Id .
  subsort Data < Payload .
  subsort Nat < Timestamp .
  subsort Nat < Value .
  subsort Query < Queries < Payload .
  subsort Oid < Oids .
  subsort Nat < Id .

  op <_`,_> : Value Timestamp -> Data [ctor] .
  op <_`,_`,_> : Key Value Timestamp -> Data [ctor] .
  op null : -> Data .
  
  op read : Id Key -> Query .
  op write : Key Value Timestamp -> Query .
  
  op ept : -> Queries .
  op _::_ : Queries Queries -> Queries [assoc id: ept] .

  op empty : -> Oids .
  op _;_ : Oids Oids -> Oids [assoc comm id: empty] .  
  
  op reply : Id Data -> Payload .
endm
view Key from TRIV to SORTS is sort Elt to Key . endv
view Data from TRIV to SORTS is sort Elt to Data . endv
view Oids from TRIV to SORTS is sort Elt to Oids . endv
view Id from TRIV to SORTS is sort Elt to Id . endv

mod OBJS is
  inc SORTS .
  pr MAP{Key,Data} .
  pr MAP{Key,Oids} .
  pr MAP{Id,Data} .
  pr MAP{Id,Oids} .
  
  ops Client Server : -> ObjType .
  
  op queries:_ : Queries -> Attribute .
  op waiting:_ : Map{Id,Oids} -> Attribute .
  op replicas:_ : Map{Key,Oids} -> Attribute .  
  op results:_ : Map{Id,Data} -> Attribute .
  op database:_ : Map{Key,Data} -> Attribute .
endm


mod QUERY is
  inc OBJS .
  
  vars O O' TB : Oid .  vars QS QS' : Queries .
  var OS : Oids .  var R : Map{Key,Oids} .
  vars AS AS' : Attributes .  vars K K' : Key .
  var DB : Map{Key,Data} .  vars V V' : Value .
  var P : Payload .  vars DAT DAT' : Data .  
  vars TS TS' : Timestamp .  vars ID ID' : Id .
  var RS : Map{Id,Data} .
  var WS : Map{Id,Oids} .
  

  rl [req] :
     (to O : QS')
     < O : Client | queries: QS, AS > 
  =>
     < O : Client | queries: (QS :: QS'), AS > .
  

 crl [issue] :
     < O : Client | queries: (read(ID,K) :: QS), waiting: WS,
	                  replicas: R, results: RS, AS > 
  => 
     < O : Client | queries: (read(ID,K) :: QS), waiting: (ID |-> R[K], WS),
	                  replicas: R, results: (RS, ID |-> < K,0,0 >), AS > 
     (propagate read(ID,K) to R[K] from O)
	 if not $hasMapping(RS,ID) .

  op propagate_to_from_ : Payload Oids Oid -> Msgs . 
  eq propagate P to (O ; OS) from O' = (propagate P to OS from O') (to O from O' : P) .
  eq propagate P to empty from O' = null .

  rl [reply] :
     (to O from O' : read(ID,K)) 
     < O : Server | database: DB, AS >
  => 
     < O : Server | database: DB, AS > 
     (to O' from O : reply(ID,DB[K])) .
   

  rl [update] :
     (to O from O' : reply(ID,DAT')) 
     < O : Client | waiting: (ID |-> (O' ; OS), WS), 
                    results: (RS, ID |-> DAT),
                    queries: (read(ID,K) :: read(ID',K') :: QS), replicas: R, AS >
  => 
     < O : Client | waiting: (ID |-> OS, WS, ID' |-> R[K']), 
                    results: (RS, ID |-> latest(DAT,DAT'), ID' |-> < K',0,0 >),
                    queries: (read(ID',K') :: QS), replicas: R, AS >
     (propagate read(ID',K') to R[K'] from O) .
     
    
  op latest : Data Data -> Data .
  eq latest(< K,V,TS >,< V',TS' >) = if TS >= TS' then < K,V,TS > else < K,V',TS' > fi .
  

  rl [last] :
     (to O from O' : reply(ID,DAT')) 
     < O : Client | waiting: (ID |-> (O' ; OS), WS), 
                    results: (RS, ID |-> DAT),
                    queries: read(ID,K), AS >
  => 
     < O : Client | waiting: (ID |-> OS, WS), 
                    results: (RS, ID |-> latest(DAT,DAT')),
                    queries: ept, AS > .
  
  
  rl [silent] : 
     (to O from O' : reply(ID,DAT')) 
     < O : Client | waiting: (ID |-> O', WS), AS >
  => 
     < O : Client | waiting: (ID |-> empty, WS), AS > .         
                    
  
  rl [write] :
     (to O : write(K,V,TS))    
     < O : Server | database: DB, AS > 
  =>
     < O : Server | database: insert(K,< V,TS >,DB), AS > .     

endm
